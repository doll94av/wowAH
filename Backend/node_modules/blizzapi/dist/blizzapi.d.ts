declare type Uri = string;
declare enum ConstantKey {
    REGIONS = "REGIONS",
    LOCALES = "LOCALES",
    DEFAULT_LOCALES = "DEFAULT_LOCALES",
    REGION_API_HOSTS = "REGION_API_HOSTS",
    SC2_REALMS = "SC2_REALMS",
    OAUTH_AUTHORIZE_URIS = "OAUTH_AUTHORIZE_URIS",
    OAUTH_TOKEN_URIS = "OAUTH_TOKEN_URIS",
    OAUTH_CHECK_TOKEN_URIS = "OAUTH_CHECK_TOKEN_URIS"
}
declare enum RegionName {
    us = "us",
    eu = "eu",
    kr = "kr",
    tw = "tw",
    cn = "cn"
}
declare enum RegionId {
    us = 1,
    eu = 2,
    kr = 3,
    tw = 3,
    cn = 5
}
declare enum RegionIdAsString {
    us = "1",
    eu = "2",
    kr = "3",
    tw = "3",
    cn = "5"
}
declare type RegionIdKey = string;
declare type RegionIdAsNumberOrString = RegionId | RegionIdAsString;
declare type RegionIdArray = ReadonlyArray<RegionId>;
declare type RegionNameArray = ReadonlyArray<RegionName>;
declare enum Locale {
    en_US = "en_US",
    es_MX = "es_MX",
    pt_BR = "pt_BR",
    en_GB = "en_GB",
    es_ES = "es_ES",
    fr_FR = "fr_FR",
    ru_RU = "ru_RU",
    de_DE = "de_DE",
    pt_PT = "pt_PT",
    it_IT = "it_IT",
    ko_KR = "ko_KR",
    zh_TW = "zh_TW",
    zh_CN = "zh_CN"
}
declare type LocaleArray = ReadonlyArray<Locale>;
declare enum DefaultLocaleIndex {
    us = 0,
    eu = 0,
    kr = 0,
    tw = 0,
    cn = 0
}
declare type DefaultLocaleIndexArray = ReadonlyArray<DefaultLocaleIndex>;
declare enum Sc2Realm {
    US = 1,
    LatAm = 2,
    Europe = 1,
    Russia = 2,
    Korea = 1,
    Taiwan = 2,
    China = 1
}
declare enum Sc2RealmAsString {
    US = "1",
    LatAm = "2",
    Europe = "1",
    Russia = "2",
    Korea = "1",
    Taiwan = "2",
    China = "1"
}
declare type Sc2RealmArray = ReadonlyArray<Sc2Realm>;
declare type Sc2RealmList = ReadonlyArray<Sc2Realm>;
declare type Sc2RealmAsNumberOrString = Sc2Realm | Sc2RealmAsString;
declare type RegionIdOrName = RegionId | RegionName;
declare type MaybeRegion = RegionIdOrName | undefined;
declare type ClientId = string;
declare type ClientSecret = string;
declare type AccessToken = string | undefined;
declare type Endpoint = string;
declare enum HttpMethod {
    GET = "GET",
    POST = "POST"
}
declare type ValidatorFunction = (endpoint: Endpoint) => boolean;
declare enum OAuthHost {
    us = "https://us.battle.net",
    eu = "https://eu.battle.net",
    kr = "https://apac.battle.net",
    tw = "https://apac.battle.net",
    cn = "https://www.battlenet.com.cn"
}
declare enum RegionHost {
    us = "https://us.api.blizzard.com",
    eu = "https://eu.api.blizzard.com",
    kr = "https://kr.api.blizzard.com",
    tw = "https://tw.api.blizzard.com",
    cn = "https://gateway.battlenet.com.cn"
}
declare enum OAuthEndpoint {
    authorize = "/oauth/authorize",
    token = "/oauth/token",
    checkToken = "/oauth/check_token?token="
}
declare enum ApiHeaders {
    LastModified = "last-modified"
}
declare enum ErrorCode {
    NotAuthorized = 401
}
declare enum ErrorResponseMessage {
    InvalidToken = "invalid_token",
    AccessTokenInvalid = "access_token_invalid",
    AccessTokenExpired = "access_token_invalid"
}
declare type InvalidAccessTokenError = {
    error: ErrorResponseMessage.AccessTokenInvalid;
};
declare type ExpiredAccessTokenError = {
    error: ErrorResponseMessage.AccessTokenExpired;
};
declare type ResponseError = InvalidAccessTokenError | ExpiredAccessTokenError;
interface AccessTokenOptions {
    validateAccessTokenOnEachQuery?: boolean;
    refreshExpiredAccessToken?: boolean;
    onAccessTokenExpired?: () => void;
    onAccessTokenRefresh?: (newAccessToken: string) => void;
}
interface QueryOptions {
    timeout?: number;
    headers?: object | Headers;
    params?: object | URLSearchParams;
}
interface BattleNetOptions {
    region: RegionIdOrName;
    clientId: ClientId;
    clientSecret: ClientSecret;
    accessToken?: AccessToken;
}
interface BattleNetQueryOptions {
    region: RegionIdOrName;
    endpoint: string;
    clientId: string;
    clientSecret: string;
    accessToken: AccessToken;
    options: AccessTokenOptions & QueryOptions;
}
declare type RegionIdProperties<Value> = {
    readonly [key in RegionId]: Value;
};
interface BlizzAPIOptions extends BattleNetOptions, AccessTokenOptions {
}

declare abstract class OAuth2API {
    readonly clientId: ClientId;
    readonly clientSecret: ClientSecret;
    constructor(clientId: ClientId, clientSecret: ClientSecret);
}

declare abstract class BattleNetAPI extends OAuth2API {
    readonly region: RegionIdOrName;
    accessToken: AccessToken;
    constructor(options: BattleNetOptions);
    getAccessToken: () => string | Promise<string>;
    setAccessToken: () => Promise<string>;
    static validateAccessToken: (region: RegionIdOrName, accessToken: AccessToken) => Promise<boolean>;
}

declare class BlizzAPI extends BattleNetAPI {
    readonly options: AccessTokenOptions;
    constructor(options: BlizzAPIOptions);
    query: <T = unknown>(endpoint: Endpoint, options?: QueryOptions | undefined) => Promise<ResponseError | T>;
    static getAllRegions: () => RegionIdProperties<RegionNameArray>;
    static getAllRegionIds: () => RegionIdArray;
    static getAllRegionNames: () => string[];
    static getRegionNameById: (regionId: RegionIdAsNumberOrString) => RegionNameArray;
    static validateRegionId: (regionId: RegionIdAsNumberOrString) => boolean;
    static getRegionIdByName: (regionName: RegionName) => RegionId;
    static validateRegionName: (regionName: RegionName) => boolean;
    static getAllLocales: () => RegionIdProperties<LocaleArray>;
    static getAllLocaleNames: () => string[];
    static getLocalesByRegionId: (regionId: RegionIdAsNumberOrString) => LocaleArray;
    static checkIfLocaleLooksValid: (locale: Locale) => boolean;
    static validateLocale: (locale: Locale) => boolean;
    static isLocaleValidForRegionId: (locale: Locale, regionId: RegionIdAsNumberOrString) => boolean;
    static getAllSc2Realms: () => RegionIdProperties<Sc2RealmArray>;
    static getAllAvailableSc2Realms: () => Sc2RealmList;
    static getSc2RealmsByRegionId: (regionId: RegionIdAsNumberOrString) => Sc2RealmList;
    static checkIfSc2RealmLooksValid: (sc2Realm: Sc2RealmAsNumberOrString) => boolean;
    static validateSc2Realm: (sc2Realm: Sc2RealmAsNumberOrString) => boolean;
    static isSc2RealmValidForRegionId: (sc2Realm: Sc2RealmAsNumberOrString, regionId: RegionIdAsNumberOrString) => boolean;
    static getDefaultLocaleNameForRegionId: (regionId: RegionIdAsNumberOrString) => Locale;
    static getAllDefaultLocaleNames: () => RegionIdProperties<Locale>;
}

export { AccessToken, AccessTokenOptions, ApiHeaders, BattleNetOptions, BattleNetQueryOptions, BlizzAPI, BlizzAPIOptions, ClientId, ClientSecret, ConstantKey, DefaultLocaleIndex, DefaultLocaleIndexArray, Endpoint, ErrorCode, ErrorResponseMessage, ExpiredAccessTokenError, HttpMethod, InvalidAccessTokenError, Locale, LocaleArray, MaybeRegion, OAuthEndpoint, OAuthHost, QueryOptions, RegionHost, RegionId, RegionIdArray, RegionIdAsNumberOrString, RegionIdAsString, RegionIdKey, RegionIdOrName, RegionIdProperties, RegionName, RegionNameArray, ResponseError, Sc2Realm, Sc2RealmArray, Sc2RealmAsNumberOrString, Sc2RealmAsString, Sc2RealmList, Uri, ValidatorFunction };
